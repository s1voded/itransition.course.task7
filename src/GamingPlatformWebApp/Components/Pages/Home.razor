@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IEnumerable<IBoardGameService> gameServices
@implements IAsyncDisposable

<PageTitle>Gaming Platform</PageTitle>

<div class="container text-center">
    @if (!string.IsNullOrEmpty(currentPlayer))
    {
        <h3>Hello <strong>@currentPlayer</strong>! </h3>
    }
    else
    {
        <div class="mb-3">
            <div class="input-group">
                <input @bind="inputNickName" type="text" class="form-control" placeholder="Player nickname" aria-label="Player nickname" aria-describedby="button-addon2">
                <button @onclick="EnterPlayer" disabled="@(!IsConnected)" class="btn btn-outline-secondary" type="button" id="button-addon2">Enter</button>
            </div>
            <div class="form-text" id="basic-addon4">Enter your nickname to join or create a game room.</div>
        </div>
    }

    @if (currentGameRoom != null)
    {
        <h4>You joined the game: <strong>@currentGameRoom.Game</strong></h4>
        @if (string.IsNullOrEmpty(currentGameRoom.Player2))
        {
            <h5>...waiting opponent...</h5>
        }
        else
        {
            var opponent = currentPlayer == currentGameRoom.Player1 ? currentGameRoom.Player2 : currentGameRoom.Player1;
            <h4>@currentPlayer vs @opponent</h4>

            var gameService = GetGameService(currentGameRoom.Game);
            if (gameService != null)
            {
                <GameBoard @ref=@gameBoard GameService="@gameService" HubConnection="@hubConnection" CurrentGameRoom="@currentGameRoom" CurrentPlayer="@currentPlayer"></GameBoard>
            }
            else
            {
                <h4>Oops. Something went wrong.</h4>
            }
        }

        if (opponentLeave)
        {
            <h4>Your opponent has left the game.</h4>
        }

        <button type="button" class="btn btn-outline-dark btn-sm m-3" @onclick="LeaveGameRoom">Leave</button>
    }

    @if (currentGameRoom == null)
    {
        <div class="row row-cols-1 row-cols-md-4 g-4">
            @foreach (var gameRoom in availableGameRooms)
            {
                if (gameRoom.Player1 != currentPlayer)
                {
                    var gameIcon = $"{@gameRoom.Game}Icon.svg";
                    <div class="col">
                        <div class="card h-100">
                            <img src="img/@gameIcon" />
                            <div class="card-body">
                                <h5 class="card-title">@gameRoom.Game</h5>
                                <p class="card-text">Player <strong>@gameRoom.Player1</strong> waits for his opponent.</p>
                            </div>
                            <div class="card-footer text-center">
                                <button type="button" class="btn btn-outline-dark btn-sm" disabled="@string.IsNullOrEmpty(currentPlayer)" @onclick="() => JoinGameRoom(gameRoom.Id)">Join</button>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="col">
                <div class="card h-100">
                    <img src="img/NewGameIcon.svg" />
                    <div class="card-body">
                        <h5 class="card-title">
                            <select class="form-select" disabled="@string.IsNullOrEmpty(currentPlayer)" @onchange="HandleGameChange">
                                @foreach (var game in (GameType[])Enum.GetValues(typeof(GameType)))
                                {
                                    <option value=@game>@game</option>
                                }
                            </select>
                        </h5>
                        <p class="card-text">Create your own game room.</p>
                    </div>
                    <div class="card-footer text-center">
                        <button type="button" class="btn btn-outline-dark btn-sm" disabled="@string.IsNullOrEmpty(currentPlayer)" @onclick="() => CreateGameRoom()">Create</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private string? inputNickName;
    private string? currentPlayer;
    private GameRoom? currentGameRoom;
    private bool opponentLeave;
    private GameType selectedGame = GameType.TicTacToe;
    private List<GameRoom> availableGameRooms = [];
    private GameBoard gameBoard;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<GameRoom>("ReceiveCurrentGameRoom", async (gameRoom) =>
        {
            currentGameRoom = gameRoom;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<GameRoom>>("ReceiveAvailableGameRooms", async (gameRooms) =>
        {
            availableGameRooms = gameRooms;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On("ReceiveOpponentLeave", async () =>
        {
            opponentLeave = true;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection?.On<GameMove>("ReceiveOpponentMove", async (gameMove) =>
        {
            await gameBoard.MakeOpponentGameMove(gameMove);
        });

        hubConnection?.On("ReceiveRestartGame", async () =>
        {
            await gameBoard.RestartGame();
        });

        await hubConnection.StartAsync();

        availableGameRooms = await hubConnection.InvokeAsync<List<GameRoom>>("GetAvailableGameRooms");
    }

    private async Task EnterPlayer()
    {
        if (!string.IsNullOrEmpty(inputNickName))
        {
            currentPlayer = inputNickName;
            inputNickName = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void HandleGameChange(ChangeEventArgs args)
    {
        selectedGame = (GameType)Enum.Parse(typeof(GameType), args.Value.ToString());
    }

    private async Task CreateGameRoom()
    {
        if (hubConnection is not null)
        {
            if (currentPlayer != null)
            {
                await hubConnection.SendAsync("CreateAndJoinGameRoom", selectedGame, currentPlayer);
            }
        }
    }

    private async Task JoinGameRoom(int gameRoomId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinGameRoom", gameRoomId, currentPlayer);
        }
    }

    private async Task LeaveGameRoom()
    {
        if (hubConnection is not null)
        {
            selectedGame = GameType.TicTacToe;
            opponentLeave = false;
            await hubConnection.InvokeAsync("LeaveAndDeleteGameRoom", currentGameRoom);
            currentGameRoom = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private IBoardGameService? GetGameService(GameType game)
    {
        switch (game)
        {
            case GameType.TicTacToe:
                return gameServices.FirstOrDefault(game => game is TicTacToeGameService);
            case GameType.Reversi:
                return gameServices.FirstOrDefault(game => game is ReversiGameService);
            default:
                return gameServices.FirstOrDefault();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            if (currentGameRoom != null)
            {
                await hubConnection.InvokeAsync("LeaveAndDeleteGameRoom", currentGameRoom);
            }
            await hubConnection.DisposeAsync();
        }
    }
}