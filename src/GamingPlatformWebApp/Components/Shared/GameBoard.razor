<div class="container text-center">
    <h5>@intermidiateResult</h5>
    @for (byte i = 0; i < GameService.BoardSize; i++)
    {
        <div class="row justify-content-md-center">
            @for (byte j = 0; j < GameService.BoardSize; j++)
            {
                var gameMove = new GameMove() { Row = i, Col = j };
                <div class="col-md-auto p-0">
                    @if (GameService.IsValidMove(gameMove, GameService.PlayerItem))
                    {
                        <button type="button" class="btn btn-outline-dark custom-btn-font-size btn-square-@BoardItemBtnSize()" disabled="@(!myTurnMakeGameMove || gameOver)" @onclick="() => OnMakePlayerMove(gameMove)">@ShowMovePossibleSymbol()</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-dark btn-square-@BoardItemBtnSize()" disabled>@GetBoardItemContent(GameService.GameBoard[i, j])</button>
                    }
                </div>
            }
        </div>
    }

    @if(!gameOver)
    {
        var playerTurn = myTurnMakeGameMove ? @CurrentPlayer : opponent;
        <h5><strong>@playerTurn</strong> turn</h5>
    }  
    else
    {
        <h2>@gameResult</h2>
        <button type="button" class="btn btn-primary" @onclick="OnRestartGame">Restart game</button>
    }

</div>

@code {
    [Parameter] public IBoardGameService GameService { get; set; }
    [Parameter] public HubConnection? HubConnection { get; set; }
    [Parameter] public GameRoom? CurrentGameRoom { get; set; }
    [Parameter] public string? CurrentPlayer { get; set; }

    private bool myTurnMakeGameMove = false;
    private string? opponent;
    private string? gameResult;
    private bool gameOver;
    private byte boardSizeForSmallItems = 5; //if board size > 5x5 - use small board items
    private string BoardItemBtnSize() => GameService.BoardSize > boardSizeForSmallItems ? "sm" : "md";
    private string intermidiateResult;

    protected override async Task OnInitializedAsync()
    {
        await InitNewGame();
    }

    private async Task OnMakePlayerMove(GameMove gameMove)
    {
        await MakeGameMove(gameMove, GameService.PlayerItem);
        await SendMoveToOpponent(gameMove);
    }

    public async Task MakeOpponentGameMove(GameMove gameMove)
    {
        await MakeGameMove(gameMove, GameService.OpponentItem);
    }

    private async Task MakeGameMove(GameMove gameMove, BoardItem boardItem)
    {
        myTurnMakeGameMove = !myTurnMakeGameMove;
        gameOver = GameService.MakeGameMove(gameMove, boardItem);
        intermidiateResult = GameService.GetIntermediateResult();
        if (gameOver) gameResult = GameService.Result.ToString();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRestartGame()
    {
        await RestartGame();
        await SendRestartGame();
    }

    public async Task RestartGame()
    {
        GameService.StartNewGame(IsOpponent());
        gameResult = null;
        gameOver = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMoveToOpponent(GameMove gameMove)
    {
        if (HubConnection is not null)
        {
            await HubConnection.SendAsync("SendMoveToOpponent", CurrentGameRoom?.Id, gameMove);
        }
    }

    private async Task SendRestartGame()
    {
        if (HubConnection is not null)
        {
            await HubConnection.SendAsync("SendRestartGame", CurrentGameRoom?.Id);
        }
    }

    private bool IsOpponent() => CurrentPlayer == CurrentGameRoom?.Player2;

    private char ShowMovePossibleSymbol() => myTurnMakeGameMove ? GameService.MovePossibleSymbol : ' ';

    private async Task InitNewGame()
    {
        GameService.StartNewGame(IsOpponent());
        myTurnMakeGameMove = IsOpponent();
        intermidiateResult = GameService.GetIntermediateResult();
        opponent = IsOpponent() ? CurrentGameRoom?.Player1 : CurrentGameRoom?.Player2;
        await InvokeAsync(StateHasChanged);
    }

    private string GetBoardItemContent(BoardItem boardItem)
    {
        return boardItem != GameService.EmptyItem ? boardItem.ToString() : "";
    }
}
