@inject TicTacToeGameService ticTacToeGameSerivce

<div class="container text-center">
    @for (byte i = 0; i < TicTacToeGameService.BoardSize; i++)
    {
        <div class="row justify-content-md-center">
            @for (byte j = 0; j < TicTacToeGameService.BoardSize; j++)
            {
                <div class="col-md-auto">
                    @if (ticTacToeGameSerivce.GameBoard[i, j] == TicTacToeGameService.BoardItem.Empty)
                    {
                        var gameMove = new GameMove() { Row = i, Col = j };
                        <button type="button" class="btn btn-outline-dark btn-square-md" disabled="@(!myTurnMakeGameMove)" @onclick="() => OnMakePlayerMove(gameMove)"></button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-dark btn-square-md" disabled="@true">@ticTacToeGameSerivce.GameBoard[i, j].ToString()</button>
                    }
                </div>
            }
        </div>
    }

    @if (myTurnMakeGameMove) {<h5>@CurrentPlayer turn</h5>}
    else {<h5>@opponentNickName turn</h5>}

    @if(!string.IsNullOrEmpty(gameResult))
    {
        <h2>@gameResult</h2>
        <button type="button" class="btn btn-primary" @onclick="OnRestartGame">Restart game</button>
    }
</div>

@code {
    [Parameter] public HubConnection? HubConnection { get; set; }
    [Parameter] public GameRoom? CurrentGameRoom { get; set; }
    [Parameter] public string? CurrentPlayer { get; set; }

    private bool myTurnMakeGameMove = false;
    private string? opponentNickName;
    private string? gameResult;

    protected override async Task OnInitializedAsync()
    {
        HubConnection?.On<GameMove>("ReceiveOpponentMove", async (gameMove) =>
        {
            MakeGameMove(gameMove, ticTacToeGameSerivce.opponentItem);
            await InvokeAsync(StateHasChanged);
        });

        HubConnection?.On("ReceiveRestartGame", async () =>
        {
            RestartGame();
            await InvokeAsync(StateHasChanged);
        });

        await InitOpponentAndTurn();
    }

    private async Task OnMakePlayerMove(GameMove gameMove)
    {
        MakeGameMove(gameMove, ticTacToeGameSerivce.playerItem);
        await SendMoveToOpponent(gameMove);
        await InvokeAsync(StateHasChanged);
    }

    private void MakeGameMove(GameMove gameMove, TicTacToeGameService.BoardItem boardItem)
    {
        myTurnMakeGameMove = !myTurnMakeGameMove;
        var gameOver = ticTacToeGameSerivce.MakeGameMove(gameMove, boardItem);
        if (gameOver) gameResult = ticTacToeGameSerivce.Result.ToString();
    }

    private async Task OnRestartGame()
    {
        RestartGame();
        await SendRestartGame();
        await InvokeAsync(StateHasChanged);
    }

    private void RestartGame()
    {
        ticTacToeGameSerivce.InitEmptyBoard();
        gameResult = null;
    }

    private async Task SendMoveToOpponent(GameMove gameMove)
    {
        if (HubConnection is not null)
        {
            await HubConnection.SendAsync("SendMoveToOpponent", CurrentGameRoom?.Id, gameMove);
        }
    }

    private async Task SendRestartGame()
    {
        if (HubConnection is not null)
        {
            await HubConnection.SendAsync("SendRestartGame", CurrentGameRoom?.Id);
        }
    }

    private async Task InitOpponentAndTurn()
    {
        //player2 make game move first
        if (CurrentPlayer == CurrentGameRoom?.Player2)
        {
            myTurnMakeGameMove = true;
            opponentNickName = CurrentGameRoom?.Player1;
        }
        else
        {
            opponentNickName = CurrentGameRoom?.Player2;
        }
        await InvokeAsync(StateHasChanged);
    }
}
